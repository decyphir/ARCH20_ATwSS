# Automatically generated STL formula
# Model: RFC_artificial
# Requirement: RFC_act_artificial
# Author: Johan Lidén Eddeland

# The following systems have been skipped and logged:

# Parameters
param t_init_RFC_artificial = 0, t_final_RFC_artificial = 30, dt = 0.04, artificial_AFE_RFC_constant = 30, fixedStepSize = 0.04, RFC_notAlwaysTime = 0.04, RFC_subsystem1_gearState = 2, RFC_preconditions_speedLimit = 50, RFC_preconditions_rpmLimit = 2500, RFC_preconditions_torqueLimit = 5, RFC_preconditions_gear = 1, RFC_preconditions_throttleLimit = 80

##########
# Inport #
##########
# RFC_act_artificial_sub1 := artificial_AFE_RFC[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# RFC_act_artificial_sub2 := artificial_AFE_RFC_constant
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# RFC_act_artificial_sub3 := (artificial_AFE_RFC[t] <= artificial_AFE_RFC_constant)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

############
# Constant #
############
# RFC_act_artificial_sub4 := fixedStepSize
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# RFC_act_artificial_sub5 := RFC_notAlwaysTime
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# RFC_act_artificial_sub6 := RFC_subsystem1_gearState
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# RFC_act_artificial_sub7 := gearSelectionState[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# RFC_act_artificial_sub8 := (RFC_subsystem1_gearState == gearSelectionState[t])
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

##########
# Inport #
##########
# RFC_act_artificial_sub9 := speed[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# RFC_act_artificial_sub10 := RPM[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# RFC_act_artificial_sub11 := outputTorque[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# RFC_act_artificial_sub12 := gear[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# RFC_act_artificial_sub13 := throttle[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

# Start of SubSystem (preconditions) #
	############
	# Constant #
	############
	# RFC_act_artificial_sub14 := RFC_preconditions_speedLimit
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_act_artificial_sub15 := (speed[t] < RFC_preconditions_speedLimit)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_act_artificial_sub16 := RFC_preconditions_rpmLimit
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_act_artificial_sub17 := (RPM[t] < RFC_preconditions_rpmLimit)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_act_artificial_sub18 := RFC_preconditions_torqueLimit
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_act_artificial_sub19 := (outputTorque[t] >= RFC_preconditions_torqueLimit)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_act_artificial_sub20 := RFC_preconditions_gear
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_act_artificial_sub21 := (gear[t] == RFC_preconditions_gear)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_act_artificial_sub22 := RFC_preconditions_throttleLimit
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_act_artificial_sub23 := (throttle[t] >= RFC_preconditions_throttleLimit)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_act_artificial_sub24 := 0
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	#############
	# SubSystem #
	#############
	# RFC_act_artificial_sub25 := (not(0) and once_[0, 30]((throttle[t] >= RFC_preconditions_throttleLimit)))
	# Depth: 		3
	# Modal depth: 	1
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# RFC_act_artificial_sub26 := (((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 30]((throttle[t] >= RFC_preconditions_throttleLimit))))
	# Depth: 		4
	# Modal depth: 	1
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

# End of SubSystem (preconditions) #

############
# Constant #
############
# RFC_act_artificial_sub27 := 0
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

#############
# SubSystem #
#############
# RFC_act_artificial_sub28 := (not(0) and once_[0, 30]((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 30]((throttle[t] >= RFC_preconditions_throttleLimit))))))
# Depth: 		6
# Modal depth: 	2
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# RFC_act_artificial_sub29 := ((RFC_subsystem1_gearState == gearSelectionState[t])  and  (not(0) and once_[0, 30]((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 30]((throttle[t] >= RFC_preconditions_throttleLimit)))))))
# Depth: 		7
# Modal depth: 	2
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

#############
# SubSystem #
#############
# RFC_act_artificial_sub30 := (not(hist_[0, 1*dt](((RFC_subsystem1_gearState == gearSelectionState[t])  and  (not(0) and once_[0, 30]((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 30]((throttle[t] >= RFC_preconditions_throttleLimit))))))))))
# Depth: 		9
# Modal depth: 	3
# Start delay: 	1
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# RFC_act_artificial_sub31 := not((not(hist_[0, 1*dt](((RFC_subsystem1_gearState == gearSelectionState[t])  and  (not(0) and once_[0, 30]((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 30]((throttle[t] >= RFC_preconditions_throttleLimit)))))))))))
# Depth: 		10
# Modal depth: 	3
# Start delay: 	1
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# RFC_act_artificial_sub32 := ((artificial_AFE_RFC[t] <= artificial_AFE_RFC_constant)  and  not((not(hist_[0, 1*dt](((RFC_subsystem1_gearState == gearSelectionState[t])  and  (not(0) and once_[0, 30]((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 30]((throttle[t] >= RFC_preconditions_throttleLimit))))))))))))
# Depth: 		11
# Modal depth: 	3
# Start delay: 	1
# End delay: 	0
# Type: 		phi_exp

# =========== SUBREQUIREMENTS ============
# No prerequisites!
# phi_sub1 := ((artificial_AFE_RFC[t] <= artificial_AFE_RFC_constant)  and  not((not(hist_[0, 1*dt](((RFC_subsystem1_gearState == gearSelectionState[t])  and  (not(0) and once_[0, 30]((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 30]((throttle[t] >= RFC_preconditions_throttleLimit))))))))))))

# =========== FINAL REQUIREMENT ===========
# phi_implies is the formula when interpreting switches using "=>"
# phi_implies := ((artificial_AFE_RFC[t] <= artificial_AFE_RFC_constant)  and  not((not(hist_[0, 1*dt](((RFC_subsystem1_gearState == gearSelectionState[t])  and  (not(0) and once_[0, 30]((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 30]((throttle[t] >= RFC_preconditions_throttleLimit))))))))))))

phi_RFC_act_artificial := alw_[t_init_RFC_artificial + 1*dt,t_final_RFC_artificial](not(((artificial_AFE_RFC[t] <= artificial_AFE_RFC_constant)  and  not((not(hist_[0, 1*dt](((RFC_subsystem1_gearState == gearSelectionState[t])  and  (not(0) and once_[0, 30]((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 30]((throttle[t] >= RFC_preconditions_throttleLimit))))))))))))))

