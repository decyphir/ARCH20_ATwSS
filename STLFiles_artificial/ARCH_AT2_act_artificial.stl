# Automatically generated STL formula
# Model: ARCH_AT2_artificial
# Requirement: ARCH_AT2_act_artificial
# Author: Johan Lidén Eddeland

# The following systems have been skipped and logged:

# Parameters
param t_init_ARCH_AT2_artificial = 0, t_final_ARCH_AT2_artificial = 30, dt = 0.04, artificial_ARCH_AT2_constant = 30, ARCH_AT2_rpmLimitAct = 4250

##########
# Inport #
##########
# ARCH_AT2_act_artificial_sub1 := artificial_ARCH_AT2[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ARCH_AT2_act_artificial_sub2 := artificial_ARCH_AT2_constant
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# ARCH_AT2_act_artificial_sub3 := (artificial_ARCH_AT2[t] <= artificial_ARCH_AT2_constant)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

##########
# Inport #
##########
# ARCH_AT2_act_artificial_sub4 := RPM[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ARCH_AT2_act_artificial_sub5 := ARCH_AT2_rpmLimitAct
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# ARCH_AT2_act_artificial_sub6 := (RPM[t] > ARCH_AT2_rpmLimitAct)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# ARCH_AT2_act_artificial_sub7 := ((artificial_ARCH_AT2[t] <= artificial_ARCH_AT2_constant)  and  (RPM[t] > ARCH_AT2_rpmLimitAct))
# Depth: 		2
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

# =========== SUBREQUIREMENTS ============
# No prerequisites!
# phi_sub1 := ((artificial_ARCH_AT2[t] <= artificial_ARCH_AT2_constant)  and  (RPM[t] > ARCH_AT2_rpmLimitAct))

# =========== FINAL REQUIREMENT ===========
# phi_implies is the formula when interpreting switches using "=>"
# phi_implies := ((artificial_ARCH_AT2[t] <= artificial_ARCH_AT2_constant)  and  (RPM[t] > ARCH_AT2_rpmLimitAct))

phi_ARCH_AT2_act_artificial := alw_[t_init_ARCH_AT2_artificial,t_final_ARCH_AT2_artificial](not(((artificial_ARCH_AT2[t] <= artificial_ARCH_AT2_constant)  and  (RPM[t] > ARCH_AT2_rpmLimitAct))))

