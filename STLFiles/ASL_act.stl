# Automatically generated STL formula
# Model: ASL
# Requirement: ASL_act
# Author: Johan Lidï¿½n Eddeland

# The following systems have been skipped and logged:

# Parameters
param t_init_ASL = 0, t_final_ASL = 10, dt = 0.04, ASL_subsystem1_gear = 2, ASL_subsystem1_speedThreshold = 80, fixedStepSize = 0.04, ASL_subsystem1_notAlwaysHorizon = 0.2, ASL_subsystem2_notAlwaysHorizon = 0.08, ASL_subsystem2_TorqueValue = 0, ASL_subsystem2_upThreshold1 = 0, ASL_subsystem2_upThreshold2 = 10, ASL_subsystem2_gear = 2, ASL_subsystem2_gear2 = 3, ASL_resetCounterMax = 0.1

##########
# Inport #
##########
# ASL_act_sub1 := speed[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# ASL_act_sub2 := gear[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

# Start of SubSystem (subsystem1) #
	############
	# Constant #
	############
	# ASL_act_sub3 := ASL_subsystem1_gear
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ASL_act_sub4 := not(gear[t] == ASL_subsystem1_gear)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#############
	# UnitDelay #
	#############
	# ASL_act_sub5 := gear[t-1*dt]
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ASL_act_sub6 := (ASL_subsystem1_gear == gear[t-1*dt])
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ASL_act_sub7 := (not(gear[t] == ASL_subsystem1_gear)  and  (ASL_subsystem1_gear == gear[t-1*dt]))
	# Depth: 		2
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# ASL_act_sub8 := ASL_subsystem1_speedThreshold
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ASL_act_sub9 := (speed[t] < ASL_subsystem1_speedThreshold)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ASL_act_sub10 := ((not(gear[t] == ASL_subsystem1_gear)  and  (ASL_subsystem1_gear == gear[t-1*dt]))  and  (speed[t] < ASL_subsystem1_speedThreshold))
	# Depth: 		3
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		phi_exp

	######################
	# RelationalOperator #
	######################
	# ASL_act_sub11 := (speed[t] >= ASL_subsystem1_speedThreshold)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#############
	# SubSystem #
	#############
	# ASL_act_sub12 := (not((speed[t] >= ASL_subsystem1_speedThreshold)) and (((not(gear[t] == ASL_subsystem1_gear)  and  (ASL_subsystem1_gear == gear[t-1*dt]))  and  (speed[t] < ASL_subsystem1_speedThreshold)) or UnitDelay1_12[t]))
	# Depth: 		5
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ASL_act_sub13 := not((not((speed[t] >= ASL_subsystem1_speedThreshold)) and (((not(gear[t] == ASL_subsystem1_gear)  and  (ASL_subsystem1_gear == gear[t-1*dt]))  and  (speed[t] < ASL_subsystem1_speedThreshold)) or UnitDelay1_12[t])))
	# Depth: 		6
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ASL_act_sub14 := (not(gear[t] == ASL_subsystem1_gear)  and  not((not((speed[t] >= ASL_subsystem1_speedThreshold)) and (((not(gear[t] == ASL_subsystem1_gear)  and  (ASL_subsystem1_gear == gear[t-1*dt]))  and  (speed[t] < ASL_subsystem1_speedThreshold)) or UnitDelay1_12[t]))))
	# Depth: 		7
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# ASL_act_sub15 := ASL_subsystem1_speedThreshold
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ASL_act_sub16 := (speed[t] <= ASL_subsystem1_speedThreshold)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# ASL_act_sub17 := fixedStepSize
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	############
	# Constant #
	############
	# ASL_act_sub18 := ASL_subsystem1_notAlwaysHorizon
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	#########
	# Logic #
	#########
	# ASL_act_sub19 := not((speed[t] <= ASL_subsystem1_speedThreshold))
	# Depth: 		2
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#############
	# SubSystem #
	#############
	# ASL_act_sub20 := (not(hist_[0, 5*dt](not((speed[t] <= ASL_subsystem1_speedThreshold)))))
	# Depth: 		4
	# Modal depth: 	1
	# Start delay: 	5
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ASL_act_sub21 := ((speed[t] <= ASL_subsystem1_speedThreshold)  or  (not(hist_[0, 5*dt](not((speed[t] <= ASL_subsystem1_speedThreshold))))))
	# Depth: 		5
	# Modal depth: 	1
	# Start delay: 	5
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# ASL_act_sub22 := 1
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	##########
	# Switch #
	##########
	# ASL_act_sub23 := ((not(gear[t] == ASL_subsystem1_gear)  and  not((not((speed[t] >= ASL_subsystem1_speedThreshold)) and (((not(gear[t] == ASL_subsystem1_gear)  and  (ASL_subsystem1_gear == gear[t-1*dt]))  and  (speed[t] < ASL_subsystem1_speedThreshold)) or UnitDelay1_12[t])))) and ((speed[t] <= ASL_subsystem1_speedThreshold)  or  (not(hist_[0, 5*dt](not((speed[t] <= ASL_subsystem1_speedThreshold))))))) or(not((not(gear[t] == ASL_subsystem1_gear)  and  not((not((speed[t] >= ASL_subsystem1_speedThreshold)) and (((not(gear[t] == ASL_subsystem1_gear)  and  (ASL_subsystem1_gear == gear[t-1*dt]))  and  (speed[t] < ASL_subsystem1_speedThreshold)) or UnitDelay1_12[t]))))) and 1)
	# Depth: 		9
	# Modal depth: 	1
	# Start delay: 	5
	# End delay: 	0
	# Type: 		phi_exp

# End of SubSystem (subsystem1) #

############
# Constant #
############
# ASL_act_sub24 := 0
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

#############
# SubSystem #
#############
# ASL_act_sub25 := (not(0) and once_[0, 10]((not(gear[t] == ASL_subsystem1_gear)  and  not((not((speed[t] >= ASL_subsystem1_speedThreshold)) and (((not(gear[t] == ASL_subsystem1_gear)  and  (ASL_subsystem1_gear == gear[t-1*dt]))  and  (speed[t] < ASL_subsystem1_speedThreshold)) or UnitDelay1_12[t]))))))
# Depth: 		9
# Modal depth: 	1
# Start delay: 	1
# End delay: 	0
# Type: 		phi_exp

##########
# Inport #
##########
# ASL_act_sub26 := impellerTorque[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# ASL_act_sub27 := RPM[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# ASL_act_sub28 := outputTorque[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# ASL_act_sub29 := upThreshold[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

# Start of SubSystem (subsystem2) #
	#########
	# Delay #
	#########
	# ASL_act_sub30 := impellerTorque[t-1*dt]
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	49
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ASL_act_sub31 := (impellerTorque[t] <= impellerTorque[t-1*dt])
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	49
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# ASL_act_sub32 := fixedStepSize
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	############
	# Constant #
	############
	# ASL_act_sub33 := ASL_subsystem2_notAlwaysHorizon
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	#########
	# Logic #
	#########
	# ASL_act_sub34 := not((impellerTorque[t] <= impellerTorque[t-1*dt]))
	# Depth: 		2
	# Modal depth: 	0
	# Start delay: 	49
	# End delay: 	0
	# Type: 		phi_exp

# Start of SubSystem (Detect Increase) #
		#############
		# UnitDelay #
		#############
		# ASL_act_sub35 := RPM[t-1*dt]
		# Depth: 		0
		# Modal depth: 	0
		# Start delay: 	1
		# End delay: 	0
		# Type: 		signal_exp

		######################
		# RelationalOperator #
		######################
		# ASL_act_sub36 := (RPM[t] > RPM[t-1*dt])
		# Depth: 		1
		# Modal depth: 	0
		# Start delay: 	1
		# End delay: 	0
		# Type: 		phi_exp

# End of SubSystem (Detect Increase) #

	#########
	# Logic #
	#########
	# ASL_act_sub37 := not((RPM[t] > RPM[t-1*dt]))
	# Depth: 		2
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		phi_exp

# Start of SubSystem (Detect Increase) #
		#############
		# UnitDelay #
		#############
		# ASL_act_sub38 := outputTorque[t-1*dt]
		# Depth: 		0
		# Modal depth: 	0
		# Start delay: 	1
		# End delay: 	0
		# Type: 		signal_exp

		######################
		# RelationalOperator #
		######################
		# ASL_act_sub39 := (outputTorque[t] > outputTorque[t-1*dt])
		# Depth: 		1
		# Modal depth: 	0
		# Start delay: 	1
		# End delay: 	0
		# Type: 		phi_exp

# End of SubSystem (Detect Increase) #

	#########
	# Logic #
	#########
	# ASL_act_sub40 := (not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))
	# Depth: 		3
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		phi_exp

# Start of SubSystem (Discrete Derivative) #
		#############
		# UnitDelay #
		#############
		# ASL_act_sub41 := outputTorque[t-1*dt]
		# Depth: 		0
		# Modal depth: 	0
		# Start delay: 	1
		# End delay: 	0
		# Type: 		signal_exp

		#######
		# Sum #
		#######
		# ASL_act_sub42 := (outputTorque[t] - outputTorque[t-1*dt])
		# Depth: 		1
		# Modal depth: 	0
		# Start delay: 	1
		# End delay: 	0
		# Type: 		signal_exp

# End of SubSystem (Discrete Derivative) #

	############
	# Constant #
	############
	# ASL_act_sub43 := ASL_subsystem2_TorqueValue
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ASL_act_sub44 := ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue)
	# Depth: 		2
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ASL_act_sub45 := ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue))
	# Depth: 		4
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ASL_act_sub46 := (not((impellerTorque[t] <= impellerTorque[t-1*dt]))  and  ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue)))
	# Depth: 		5
	# Modal depth: 	0
	# Start delay: 	49
	# End delay: 	0
	# Type: 		phi_exp

	#############
	# SubSystem #
	#############
	# ASL_act_sub47 := (not(hist_[0, 2*dt]((not((impellerTorque[t] <= impellerTorque[t-1*dt]))  and  ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue))))))
	# Depth: 		7
	# Modal depth: 	1
	# Start delay: 	51
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ASL_act_sub48 := ((impellerTorque[t] <= impellerTorque[t-1*dt])  or  (not(hist_[0, 2*dt]((not((impellerTorque[t] <= impellerTorque[t-1*dt]))  and  ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue)))))))
	# Depth: 		8
	# Modal depth: 	1
	# Start delay: 	51
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# ASL_act_sub49 := ASL_subsystem2_upThreshold1
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ASL_act_sub50 := (upThreshold[t] == ASL_subsystem2_upThreshold1)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# ASL_act_sub51 := ASL_subsystem2_upThreshold2
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ASL_act_sub52 := (upThreshold[t] == ASL_subsystem2_upThreshold2)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ASL_act_sub53 := ((upThreshold[t] == ASL_subsystem2_upThreshold1)  or  (upThreshold[t] == ASL_subsystem2_upThreshold2))
	# Depth: 		2
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ASL_act_sub54 := not(((upThreshold[t] == ASL_subsystem2_upThreshold1)  or  (upThreshold[t] == ASL_subsystem2_upThreshold2)))
	# Depth: 		3
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# ASL_act_sub55 := ASL_subsystem2_gear
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ASL_act_sub56 := (gear[t] == ASL_subsystem2_gear)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# ASL_act_sub57 := ASL_subsystem2_gear2
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ASL_act_sub58 := (gear[t] == ASL_subsystem2_gear2)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ASL_act_sub59 := ((gear[t] == ASL_subsystem2_gear)  or  (gear[t] == ASL_subsystem2_gear2))
	# Depth: 		2
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ASL_act_sub60 := ((not(((upThreshold[t] == ASL_subsystem2_upThreshold1)  or  (upThreshold[t] == ASL_subsystem2_upThreshold2)))  and  ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue)))  and  ((gear[t] == ASL_subsystem2_gear)  or  (gear[t] == ASL_subsystem2_gear2)))
	# Depth: 		5
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# ASL_act_sub61 := 1
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	##########
	# Switch #
	##########
	# ASL_act_sub62 := (((not(((upThreshold[t] == ASL_subsystem2_upThreshold1)  or  (upThreshold[t] == ASL_subsystem2_upThreshold2)))  and  ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue)))  and  ((gear[t] == ASL_subsystem2_gear)  or  (gear[t] == ASL_subsystem2_gear2))) and ((impellerTorque[t] <= impellerTorque[t-1*dt])  or  (not(hist_[0, 2*dt]((not((impellerTorque[t] <= impellerTorque[t-1*dt]))  and  ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue)))))))) or(not(((not(((upThreshold[t] == ASL_subsystem2_upThreshold1)  or  (upThreshold[t] == ASL_subsystem2_upThreshold2)))  and  ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue)))  and  ((gear[t] == ASL_subsystem2_gear)  or  (gear[t] == ASL_subsystem2_gear2)))) and 1)
	# Depth: 		10
	# Modal depth: 	1
	# Start delay: 	51
	# End delay: 	0
	# Type: 		phi_exp

# End of SubSystem (subsystem2) #

#########
# Logic #
#########
# ASL_act_sub63 := not(((not(((upThreshold[t] == ASL_subsystem2_upThreshold1)  or  (upThreshold[t] == ASL_subsystem2_upThreshold2)))  and  ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue)))  and  ((gear[t] == ASL_subsystem2_gear)  or  (gear[t] == ASL_subsystem2_gear2))))
# Depth: 		6
# Modal depth: 	0
# Start delay: 	1
# End delay: 	0
# Type: 		phi_exp

############
# Constant #
############
# ASL_act_sub64 := 0
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ASL_act_sub65 := fixedStepSize
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ASL_act_sub66 := ASL_resetCounterMax
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# ASL_act_sub67 := hist_[0,2*dt](not(not(((not(((upThreshold[t] == ASL_subsystem2_upThreshold1)  or  (upThreshold[t] == ASL_subsystem2_upThreshold2)))  and  ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue)))  and  ((gear[t] == ASL_subsystem2_gear)  or  (gear[t] == ASL_subsystem2_gear2))))))
# Depth: 		9
# Modal depth: 	1
# Start delay: 	3
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# ASL_act_sub68 := ((not(0) and once_[0, 10]((not(gear[t] == ASL_subsystem1_gear)  and  not((not((speed[t] >= ASL_subsystem1_speedThreshold)) and (((not(gear[t] == ASL_subsystem1_gear)  and  (ASL_subsystem1_gear == gear[t-1*dt]))  and  (speed[t] < ASL_subsystem1_speedThreshold)) or UnitDelay1_12[t]))))))  and  hist_[0,2*dt](not(not(((not(((upThreshold[t] == ASL_subsystem2_upThreshold1)  or  (upThreshold[t] == ASL_subsystem2_upThreshold2)))  and  ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue)))  and  ((gear[t] == ASL_subsystem2_gear)  or  (gear[t] == ASL_subsystem2_gear2)))))))
# Depth: 		10
# Modal depth: 	1
# Start delay: 	3
# End delay: 	0
# Type: 		phi_exp

# =========== SUBREQUIREMENTS ============
# No prerequisites!
# phi_sub1 := ((not(0) and once_[0, 10]((not(gear[t] == ASL_subsystem1_gear)  and  not((not((speed[t] >= ASL_subsystem1_speedThreshold)) and (((not(gear[t] == ASL_subsystem1_gear)  and  (ASL_subsystem1_gear == gear[t-1*dt]))  and  (speed[t] < ASL_subsystem1_speedThreshold)) or UnitDelay1_12[t]))))))  and  hist_[0,2*dt](not(not(((not(((upThreshold[t] == ASL_subsystem2_upThreshold1)  or  (upThreshold[t] == ASL_subsystem2_upThreshold2)))  and  ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue)))  and  ((gear[t] == ASL_subsystem2_gear)  or  (gear[t] == ASL_subsystem2_gear2)))))))

# =========== FINAL REQUIREMENT ===========
# phi_implies is the formula when interpreting switches using "=>"
# phi_implies := ((not(0) and once_[0, 10]((not(gear[t] == ASL_subsystem1_gear)  and  not((not((speed[t] >= ASL_subsystem1_speedThreshold)) and (((not(gear[t] == ASL_subsystem1_gear)  and  (ASL_subsystem1_gear == gear[t-1*dt]))  and  (speed[t] < ASL_subsystem1_speedThreshold)) or UnitDelay1_12[t]))))))  and  hist_[0,2*dt](not(not(((not(((upThreshold[t] == ASL_subsystem2_upThreshold1)  or  (upThreshold[t] == ASL_subsystem2_upThreshold2)))  and  ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue)))  and  ((gear[t] == ASL_subsystem2_gear)  or  (gear[t] == ASL_subsystem2_gear2)))))))

phi_ASL_act := alw_[t_init_ASL + 3*dt,t_final_ASL](not(((not(0) and once_[0, 10]((not(gear[t] == ASL_subsystem1_gear)  and  not((not((speed[t] >= ASL_subsystem1_speedThreshold)) and (((not(gear[t] == ASL_subsystem1_gear)  and  (ASL_subsystem1_gear == gear[t-1*dt]))  and  (speed[t] < ASL_subsystem1_speedThreshold)) or UnitDelay1_12[t]))))))  and  hist_[0,2*dt](not(not(((not(((upThreshold[t] == ASL_subsystem2_upThreshold1)  or  (upThreshold[t] == ASL_subsystem2_upThreshold2)))  and  ((not((RPM[t] > RPM[t-1*dt]))  and  (outputTorque[t] > outputTorque[t-1*dt]))  and  ((outputTorque[t] - outputTorque[t-1*dt]) >= ASL_subsystem2_TorqueValue)))  and  ((gear[t] == ASL_subsystem2_gear)  or  (gear[t] == ASL_subsystem2_gear2)))))))))

