# Automatically generated STL formula
# Model: AOT_artificial
# Requirement: AOT_req_artificial
# Author: Johan Lidén Eddeland

# The following systems have been skipped and logged:

# Parameters
param t_init_AOT_artificial = 0, t_final_AOT_artificial = 30, dt = 0.04, artificial_AOT_AFE_constant = 30, artificial_AOT_ASL_constant = 30, AOT_speedLimit = 70, AOT_rpmLimit = 2000, fixedStepSize = 0.04, AOT_notAlwaysHorizon = 1, AOT_gear = 3, AOT_gearSelectionState = 1

##########
# Inport #
##########
# AOT_req_artificial_sub1 := artificial_AOT_AFE[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# AOT_req_artificial_sub2 := artificial_AOT_AFE_constant
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# AOT_req_artificial_sub3 := (artificial_AOT_AFE[t] <= artificial_AOT_AFE_constant)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

##########
# Inport #
##########
# AOT_req_artificial_sub4 := artificial_AOT_ASL[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# AOT_req_artificial_sub5 := artificial_AOT_ASL_constant
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# AOT_req_artificial_sub6 := (artificial_AOT_ASL[t] <= artificial_AOT_ASL_constant)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# AOT_req_artificial_sub7 := ((artificial_AOT_AFE[t] <= artificial_AOT_AFE_constant)  or  (artificial_AOT_ASL[t] <= artificial_AOT_ASL_constant))
# Depth: 		2
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

##########
# Inport #
##########
# AOT_req_artificial_sub8 := speed[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# AOT_req_artificial_sub9 := AOT_speedLimit
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# AOT_req_artificial_sub10 := (speed[t] < AOT_speedLimit)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

##########
# Inport #
##########
# AOT_req_artificial_sub11 := RPM[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

#######
# Abs #
#######
# AOT_req_artificial_sub12 := abs(RPM[t])
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# AOT_req_artificial_sub13 := AOT_rpmLimit
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# AOT_req_artificial_sub14 := (abs(RPM[t]) <= AOT_rpmLimit)
# Depth: 		2
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

############
# Constant #
############
# AOT_req_artificial_sub15 := fixedStepSize
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# AOT_req_artificial_sub16 := AOT_notAlwaysHorizon
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# AOT_req_artificial_sub17 := gear[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# AOT_req_artificial_sub18 := AOT_gear
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# AOT_req_artificial_sub19 := (gear[t] == AOT_gear)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

##########
# Inport #
##########
# AOT_req_artificial_sub20 := gearSelectionState[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# AOT_req_artificial_sub21 := AOT_gearSelectionState
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# AOT_req_artificial_sub22 := (gearSelectionState[t] == AOT_gearSelectionState)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# AOT_req_artificial_sub23 := ((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState))
# Depth: 		2
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

#############
# SubSystem #
#############
# AOT_req_artificial_sub24 := (not(hist_[0, 25*dt](((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState)))))
# Depth: 		4
# Modal depth: 	1
# Start delay: 	25
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# AOT_req_artificial_sub25 := (((speed[t] < AOT_speedLimit)  or  (abs(RPM[t]) <= AOT_rpmLimit))  or  (not(hist_[0, 25*dt](((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState))))))
# Depth: 		5
# Modal depth: 	1
# Start delay: 	25
# End delay: 	0
# Type: 		phi_exp

############
# Constant #
############
# AOT_req_artificial_sub26 := 1
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Switch #
##########
# AOT_req_artificial_sub27 := (((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState)) and (((speed[t] < AOT_speedLimit)  or  (abs(RPM[t]) <= AOT_rpmLimit))  or  (not(hist_[0, 25*dt](((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState))))))) or(not(((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState))) and 1)
# Depth: 		7
# Modal depth: 	1
# Start delay: 	25
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# AOT_req_artificial_sub28 := (((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState)) and (((artificial_AOT_AFE[t] <= artificial_AOT_AFE_constant)  or  (artificial_AOT_ASL[t] <= artificial_AOT_ASL_constant))  or  (((speed[t] < AOT_speedLimit)  or  (abs(RPM[t]) <= AOT_rpmLimit))  or  (not(hist_[0, 25*dt](((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState)))))))) or(not(((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState))) and (((artificial_AOT_AFE[t] <= artificial_AOT_AFE_constant)  or  (artificial_AOT_ASL[t] <= artificial_AOT_ASL_constant))  or  1))
# Depth: 		8
# Modal depth: 	1
# Start delay: 	25
# End delay: 	0
# Type: 		phi_exp

# =========== SUBREQUIREMENTS ============
# Prerequisite 1 #
# sub23[t] ~= 0
# prereq1 := ((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState))
# phi_sub1 := (((artificial_AOT_AFE[t] <= artificial_AOT_AFE_constant)  or  (artificial_AOT_ASL[t] <= artificial_AOT_ASL_constant))  or  (((speed[t] < AOT_speedLimit)  or  (abs(RPM[t]) <= AOT_rpmLimit))  or  (not(hist_[0, 25*dt](((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState)))))))

# Prerequisite 2 #
# sub23[t] == 0
# prereq2 := not(((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState)))
# phi_sub2 := (((artificial_AOT_AFE[t] <= artificial_AOT_AFE_constant)  or  (artificial_AOT_ASL[t] <= artificial_AOT_ASL_constant))  or  1)

# =========== FINAL REQUIREMENT ===========
# phi_implies is the formula when interpreting switches using "=>"
# phi_implies := (((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState)) => (((artificial_AOT_AFE[t] <= artificial_AOT_AFE_constant)  or  (artificial_AOT_ASL[t] <= artificial_AOT_ASL_constant))  or  (((speed[t] < AOT_speedLimit)  or  (abs(RPM[t]) <= AOT_rpmLimit))  or  (not(hist_[0, 25*dt](((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState)))))))) and (not(((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState))) => (((artificial_AOT_AFE[t] <= artificial_AOT_AFE_constant)  or  (artificial_AOT_ASL[t] <= artificial_AOT_ASL_constant))  or  1))

phi_AOT_req_artificial := alw_[t_init_AOT_artificial + 25*dt,t_final_AOT_artificial]((((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState)) and (((artificial_AOT_AFE[t] <= artificial_AOT_AFE_constant)  or  (artificial_AOT_ASL[t] <= artificial_AOT_ASL_constant))  or  (((speed[t] < AOT_speedLimit)  or  (abs(RPM[t]) <= AOT_rpmLimit))  or  (not(hist_[0, 25*dt](((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState)))))))) or (not(((gear[t] == AOT_gear)  and  (gearSelectionState[t] == AOT_gearSelectionState))) and (((artificial_AOT_AFE[t] <= artificial_AOT_AFE_constant)  or  (artificial_AOT_ASL[t] <= artificial_AOT_ASL_constant))  or  1)))

