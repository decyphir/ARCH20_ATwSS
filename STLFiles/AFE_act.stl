# Automatically generated STL formula
# Model: AFE
# Requirement: AFE_act
# Author: Johan Lidï¿½n Eddeland

# The following systems have been skipped and logged:

# Parameters
param t_init_AFE = 0, t_final_AFE = 10, dt = 0.04, AFE_speedMin = 50, AFE_downThreshold = 27, AFE_subsystem1_gear = 3, AFE_subsystem1_gearSelectionState = 1, AFE_subsystem1_upThreshold1 = 40, AFE_subsystem1_upThreshold2 = 60, fixedStepSize = 0.04, AFE_subsystem1_notAlwaysTimeHorizon = 0.1, AFE_subsystem1_downThreshold = 20

##########
# Inport #
##########
# AFE_act_sub1 := speed[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# AFE_act_sub2 := AFE_speedMin
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# AFE_act_sub3 := (speed[t] >= AFE_speedMin)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

##########
# Inport #
##########
# AFE_act_sub4 := downThreshold[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# AFE_act_sub5 := AFE_downThreshold
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# AFE_act_sub6 := (downThreshold[t] >= AFE_downThreshold)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

##########
# Inport #
##########
# AFE_act_sub7 := gear[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# AFE_act_sub8 := gearSelectionState[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# AFE_act_sub9 := upThreshold[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

# Start of SubSystem (subsystem1) #
	############
	# Constant #
	############
	# AFE_act_sub10 := 1
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	############
	# Constant #
	############
	# AFE_act_sub11 := AFE_subsystem1_gear
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# AFE_act_sub12 := (gear[t] == AFE_subsystem1_gear)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# AFE_act_sub13 := AFE_subsystem1_gearSelectionState
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# AFE_act_sub14 := (gearSelectionState[t] == AFE_subsystem1_gearSelectionState)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# AFE_act_sub15 := AFE_subsystem1_upThreshold1
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# AFE_act_sub16 := (upThreshold[t] >= AFE_subsystem1_upThreshold1)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# AFE_act_sub17 := AFE_subsystem1_upThreshold2
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# AFE_act_sub18 := (upThreshold[t] <= AFE_subsystem1_upThreshold2)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# AFE_act_sub19 := ((upThreshold[t] >= AFE_subsystem1_upThreshold1)  and  (upThreshold[t] <= AFE_subsystem1_upThreshold2))
	# Depth: 		2
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# AFE_act_sub20 := (((gear[t] == AFE_subsystem1_gear)  and  (gearSelectionState[t] == AFE_subsystem1_gearSelectionState))  and  ((upThreshold[t] >= AFE_subsystem1_upThreshold1)  and  (upThreshold[t] <= AFE_subsystem1_upThreshold2)))
	# Depth: 		3
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# AFE_act_sub21 := not((((gear[t] == AFE_subsystem1_gear)  and  (gearSelectionState[t] == AFE_subsystem1_gearSelectionState))  and  ((upThreshold[t] >= AFE_subsystem1_upThreshold1)  and  (upThreshold[t] <= AFE_subsystem1_upThreshold2))))
	# Depth: 		4
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# AFE_act_sub22 := fixedStepSize
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	############
	# Constant #
	############
	# AFE_act_sub23 := AFE_subsystem1_notAlwaysTimeHorizon
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	#############
	# SubSystem #
	#############
	# AFE_act_sub24 := (not(hist_[0, 2*dt]((((gear[t] == AFE_subsystem1_gear)  and  (gearSelectionState[t] == AFE_subsystem1_gearSelectionState))  and  ((upThreshold[t] >= AFE_subsystem1_upThreshold1)  and  (upThreshold[t] <= AFE_subsystem1_upThreshold2))))))
	# Depth: 		5
	# Modal depth: 	1
	# Start delay: 	2
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# AFE_act_sub25 := AFE_subsystem1_downThreshold
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# AFE_act_sub26 := (downThreshold[t] == AFE_subsystem1_downThreshold)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# AFE_act_sub27 := ((not(hist_[0, 2*dt]((((gear[t] == AFE_subsystem1_gear)  and  (gearSelectionState[t] == AFE_subsystem1_gearSelectionState))  and  ((upThreshold[t] >= AFE_subsystem1_upThreshold1)  and  (upThreshold[t] <= AFE_subsystem1_upThreshold2))))))  or  (downThreshold[t] == AFE_subsystem1_downThreshold))
	# Depth: 		6
	# Modal depth: 	0
	# Start delay: 	2
	# End delay: 	0
	# Type: 		phi_exp

	##########
	# Switch #
	##########
	# AFE_act_sub28 := (not((((gear[t] == AFE_subsystem1_gear)  and  (gearSelectionState[t] == AFE_subsystem1_gearSelectionState))  and  ((upThreshold[t] >= AFE_subsystem1_upThreshold1)  and  (upThreshold[t] <= AFE_subsystem1_upThreshold2)))) and 1) or(not(not((((gear[t] == AFE_subsystem1_gear)  and  (gearSelectionState[t] == AFE_subsystem1_gearSelectionState))  and  ((upThreshold[t] >= AFE_subsystem1_upThreshold1)  and  (upThreshold[t] <= AFE_subsystem1_upThreshold2))))) and ((not(hist_[0, 2*dt]((((gear[t] == AFE_subsystem1_gear)  and  (gearSelectionState[t] == AFE_subsystem1_gearSelectionState))  and  ((upThreshold[t] >= AFE_subsystem1_upThreshold1)  and  (upThreshold[t] <= AFE_subsystem1_upThreshold2))))))  or  (downThreshold[t] == AFE_subsystem1_downThreshold)))
	# Depth: 		8
	# Modal depth: 	0
	# Start delay: 	2
	# End delay: 	0
	# Type: 		phi_exp

# End of SubSystem (subsystem1) #

#########
# Logic #
#########
# AFE_act_sub29 := (((speed[t] >= AFE_speedMin)  and  (((gear[t] == AFE_subsystem1_gear)  and  (gearSelectionState[t] == AFE_subsystem1_gearSelectionState))  and  ((upThreshold[t] >= AFE_subsystem1_upThreshold1)  and  (upThreshold[t] <= AFE_subsystem1_upThreshold2))))  and  (downThreshold[t] >= AFE_downThreshold))
# Depth: 		4
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

# =========== SUBREQUIREMENTS ============
# No prerequisites!
# phi_sub1 := (((speed[t] >= AFE_speedMin)  and  (((gear[t] == AFE_subsystem1_gear)  and  (gearSelectionState[t] == AFE_subsystem1_gearSelectionState))  and  ((upThreshold[t] >= AFE_subsystem1_upThreshold1)  and  (upThreshold[t] <= AFE_subsystem1_upThreshold2))))  and  (downThreshold[t] >= AFE_downThreshold))

# =========== FINAL REQUIREMENT ===========
# phi_implies is the formula when interpreting switches using "=>"
# phi_implies := (((speed[t] >= AFE_speedMin)  and  (((gear[t] == AFE_subsystem1_gear)  and  (gearSelectionState[t] == AFE_subsystem1_gearSelectionState))  and  ((upThreshold[t] >= AFE_subsystem1_upThreshold1)  and  (upThreshold[t] <= AFE_subsystem1_upThreshold2))))  and  (downThreshold[t] >= AFE_downThreshold))

phi_AFE_act := alw_[t_init_AFE,t_final_AFE](not((((speed[t] >= AFE_speedMin)  and  (((gear[t] == AFE_subsystem1_gear)  and  (gearSelectionState[t] == AFE_subsystem1_gearSelectionState))  and  ((upThreshold[t] >= AFE_subsystem1_upThreshold1)  and  (upThreshold[t] <= AFE_subsystem1_upThreshold2))))  and  (downThreshold[t] >= AFE_downThreshold))))

