# Automatically generated STL formula
# Model: ARCH_AT6b
# Requirement: ARCH_AT6b_req
# Author: Johan Lidï¿½n Eddeland

# The following systems have been skipped and logged:

# Parameters
param t_init_ARCH_AT6b = 0, t_final_ARCH_AT6b = 30, dt = 0.04, ARCH_AT6b_rpmThreshold = 3000, ARCH_AT6b_rpmStartTime = 0, ARCH_AT6b_rpmEndTime = 30, ARCH_AT6b_speedThreshold = 50, ARCH_AT6b_speedStartTime = 0, ARCH_AT6b_speedEndTime = 8

##########
# Inport #
##########
# ARCH_AT6b_req_sub1 := RPM[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ARCH_AT6b_req_sub2 := ARCH_AT6b_rpmThreshold
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# ARCH_AT6b_req_sub3 := (RPM[t] <= ARCH_AT6b_rpmThreshold)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

############
# Constant #
############
# ARCH_AT6b_req_sub4 := ARCH_AT6b_rpmStartTime
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ARCH_AT6b_req_sub5 := ARCH_AT6b_rpmEndTime
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

#############
# SubSystem #
#############
# ARCH_AT6b_req_sub6 := (alw_[0, 30]((RPM[t] <= ARCH_AT6b_rpmThreshold)))
# Depth: 		2
# Modal depth: 	1
# Start delay: 	30
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# ARCH_AT6b_req_sub7 := not((alw_[0, 30]((RPM[t] <= ARCH_AT6b_rpmThreshold))))
# Depth: 		3
# Modal depth: 	1
# Start delay: 	30
# End delay: 	0
# Type: 		phi_exp

##########
# Inport #
##########
# ARCH_AT6b_req_sub8 := speed[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ARCH_AT6b_req_sub9 := ARCH_AT6b_speedThreshold
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# ARCH_AT6b_req_sub10 := (speed[t] <= ARCH_AT6b_speedThreshold)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

############
# Constant #
############
# ARCH_AT6b_req_sub11 := ARCH_AT6b_speedStartTime
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ARCH_AT6b_req_sub12 := ARCH_AT6b_speedEndTime
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

#############
# SubSystem #
#############
# ARCH_AT6b_req_sub13 := (alw_[0, 8]((speed[t] <= ARCH_AT6b_speedThreshold)))
# Depth: 		2
# Modal depth: 	1
# Start delay: 	8
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# ARCH_AT6b_req_sub14 := (not((alw_[0, 30]((RPM[t] <= ARCH_AT6b_rpmThreshold))))  or  (alw_[0, 8]((speed[t] <= ARCH_AT6b_speedThreshold))))
# Depth: 		4
# Modal depth: 	1
# Start delay: 	30
# End delay: 	0
# Type: 		phi_exp

# =========== SUBREQUIREMENTS ============
# No prerequisites!
# phi_sub1 := (not((alw_[0, 30]((RPM[t] <= ARCH_AT6b_rpmThreshold))))  or  (alw_[0, 8]((speed[t] <= ARCH_AT6b_speedThreshold))))

# =========== FINAL REQUIREMENT ===========
# phi_implies is the formula when interpreting switches using "=>"
# phi_implies := (not((alw_[0, 30]((RPM[t] <= ARCH_AT6b_rpmThreshold))))  or  (alw_[0, 8]((speed[t] <= ARCH_AT6b_speedThreshold))))

phi_ARCH_AT6b_req := (not((alw_[0, 30]((RPM[t] <= ARCH_AT6b_rpmThreshold))))  or  (alw_[0, 8]((speed[t] <= ARCH_AT6b_speedThreshold))))

