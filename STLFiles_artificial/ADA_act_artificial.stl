# Automatically generated STL formula
# Model: ADA_artificial
# Requirement: ADA_act_artificial
# Author: Johan Lidén Eddeland

# The following systems have been skipped and logged:

# Parameters
param t_init_ADA_artificial = 0, t_final_ADA_artificial = 30, dt = 0.04, artificial_ADA_constant = 30, artificial_ASL_ADA_constant = 30, fixedStepSize = 0.04, ADA_notAlwaysHorizon = 1, ADA_subsystem3_gear = 3, ADA_subsystem3_gearSelectionState = 2, ADA_subsystem3_speedMin = 65, ADA_subsystem3_speedMax = 70

##########
# Inport #
##########
# ADA_act_artificial_sub1 := artificial_ADA[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ADA_act_artificial_sub2 := artificial_ADA_constant
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# ADA_act_artificial_sub3 := (artificial_ADA[t] <= artificial_ADA_constant)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

##########
# Inport #
##########
# ADA_act_artificial_sub4 := artificial_ASL_ADA[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ADA_act_artificial_sub5 := artificial_ASL_ADA_constant
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# ADA_act_artificial_sub6 := (artificial_ASL_ADA[t] <= artificial_ASL_ADA_constant)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# ADA_act_artificial_sub7 := ((artificial_ADA[t] <= artificial_ADA_constant)  and  (artificial_ASL_ADA[t] <= artificial_ASL_ADA_constant))
# Depth: 		2
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

############
# Constant #
############
# ADA_act_artificial_sub8 := fixedStepSize
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ADA_act_artificial_sub9 := ADA_notAlwaysHorizon
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# ADA_act_artificial_sub10 := gear[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# ADA_act_artificial_sub11 := gearSelectionState[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# ADA_act_artificial_sub12 := speed[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

# Start of SubSystem (subsystem3) #
	############
	# Constant #
	############
	# ADA_act_artificial_sub13 := ADA_subsystem3_gear
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ADA_act_artificial_sub14 := (gear[t] == ADA_subsystem3_gear)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# ADA_act_artificial_sub15 := ADA_subsystem3_gearSelectionState
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ADA_act_artificial_sub16 := not(gearSelectionState[t] == ADA_subsystem3_gearSelectionState)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# ADA_act_artificial_sub17 := ADA_subsystem3_speedMin
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ADA_act_artificial_sub18 := (speed[t] >= ADA_subsystem3_speedMin)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# ADA_act_artificial_sub19 := ADA_subsystem3_speedMax
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# ADA_act_artificial_sub20 := (speed[t] <= ADA_subsystem3_speedMax)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ADA_act_artificial_sub21 := ((speed[t] >= ADA_subsystem3_speedMin)  and  (speed[t] <= ADA_subsystem3_speedMax))
	# Depth: 		2
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# ADA_act_artificial_sub22 := (((gear[t] == ADA_subsystem3_gear)  and  not(gearSelectionState[t] == ADA_subsystem3_gearSelectionState))  and  ((speed[t] >= ADA_subsystem3_speedMin)  and  (speed[t] <= ADA_subsystem3_speedMax)))
	# Depth: 		3
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

# End of SubSystem (subsystem3) #

#############
# SubSystem #
#############
# ADA_act_artificial_sub23 := (not(hist_[0, 25*dt]((((gear[t] == ADA_subsystem3_gear)  and  not(gearSelectionState[t] == ADA_subsystem3_gearSelectionState))  and  ((speed[t] >= ADA_subsystem3_speedMin)  and  (speed[t] <= ADA_subsystem3_speedMax))))))
# Depth: 		5
# Modal depth: 	1
# Start delay: 	25
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# ADA_act_artificial_sub24 := not((not(hist_[0, 25*dt]((((gear[t] == ADA_subsystem3_gear)  and  not(gearSelectionState[t] == ADA_subsystem3_gearSelectionState))  and  ((speed[t] >= ADA_subsystem3_speedMin)  and  (speed[t] <= ADA_subsystem3_speedMax)))))))
# Depth: 		6
# Modal depth: 	1
# Start delay: 	25
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# ADA_act_artificial_sub25 := (((artificial_ADA[t] <= artificial_ADA_constant)  and  (artificial_ASL_ADA[t] <= artificial_ASL_ADA_constant))  and  not((not(hist_[0, 25*dt]((((gear[t] == ADA_subsystem3_gear)  and  not(gearSelectionState[t] == ADA_subsystem3_gearSelectionState))  and  ((speed[t] >= ADA_subsystem3_speedMin)  and  (speed[t] <= ADA_subsystem3_speedMax))))))))
# Depth: 		7
# Modal depth: 	1
# Start delay: 	25
# End delay: 	0
# Type: 		phi_exp

# =========== SUBREQUIREMENTS ============
# No prerequisites!
# phi_sub1 := (((artificial_ADA[t] <= artificial_ADA_constant)  and  (artificial_ASL_ADA[t] <= artificial_ASL_ADA_constant))  and  not((not(hist_[0, 25*dt]((((gear[t] == ADA_subsystem3_gear)  and  not(gearSelectionState[t] == ADA_subsystem3_gearSelectionState))  and  ((speed[t] >= ADA_subsystem3_speedMin)  and  (speed[t] <= ADA_subsystem3_speedMax))))))))

# =========== FINAL REQUIREMENT ===========
# phi_implies is the formula when interpreting switches using "=>"
# phi_implies := (((artificial_ADA[t] <= artificial_ADA_constant)  and  (artificial_ASL_ADA[t] <= artificial_ASL_ADA_constant))  and  not((not(hist_[0, 25*dt]((((gear[t] == ADA_subsystem3_gear)  and  not(gearSelectionState[t] == ADA_subsystem3_gearSelectionState))  and  ((speed[t] >= ADA_subsystem3_speedMin)  and  (speed[t] <= ADA_subsystem3_speedMax))))))))

phi_ADA_act_artificial := alw_[t_init_ADA_artificial + 25*dt,t_final_ADA_artificial](not((((artificial_ADA[t] <= artificial_ADA_constant)  and  (artificial_ASL_ADA[t] <= artificial_ASL_ADA_constant))  and  not((not(hist_[0, 25*dt]((((gear[t] == ADA_subsystem3_gear)  and  not(gearSelectionState[t] == ADA_subsystem3_gearSelectionState))  and  ((speed[t] >= ADA_subsystem3_speedMin)  and  (speed[t] <= ADA_subsystem3_speedMax))))))))))

