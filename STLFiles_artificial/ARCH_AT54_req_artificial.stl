# Automatically generated STL formula
# Model: ARCH_AT54_artificial
# Requirement: ARCH_AT54_req_artificial
# Author: Johan Lidén Eddeland

# The following systems have been skipped and logged:

# Parameters
param t_init_ARCH_AT54_artificial = 0, t_final_ARCH_AT54_artificial = 30, dt = 0.04, artificial_ARCH_AT5_constant = 30, ARCH_AT54_timeHorizon = 2.5, fixedStepSize = 0.04

##########
# Inport #
##########
# ARCH_AT54_req_artificial_sub1 := artificial_ARCH_AT5[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ARCH_AT54_req_artificial_sub2 := artificial_ARCH_AT5_constant
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# ARCH_AT54_req_artificial_sub3 := (artificial_ARCH_AT5[t] <= artificial_ARCH_AT5_constant)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

############
# Constant #
############
# ARCH_AT54_req_artificial_sub4 := ARCH_AT54_timeHorizon
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ARCH_AT54_req_artificial_sub5 := fixedStepSize
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# ARCH_AT54_req_artificial_sub6 := gear[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

############
# Constant #
############
# ARCH_AT54_req_artificial_sub7 := 4
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# ARCH_AT54_req_artificial_sub8 := (gear[t] == 4)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

# Start of SubSystem (Detect Increase) #
	#############
	# UnitDelay #
	#############
	# ARCH_AT54_req_artificial_sub9 := (gear[t-1*dt] == 4)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		phi_exp

	######################
	# RelationalOperator #
	######################
	# ARCH_AT54_req_artificial_sub10 := ((gear[t] == 4)  and not( (gear[t-1*dt] == 4)))
	# Depth: 		2
	# Modal depth: 	0
	# Start delay: 	1
	# End delay: 	0
	# Type: 		phi_exp

# End of SubSystem (Detect Increase) #

#############
# SubSystem #
#############
# ARCH_AT54_req_artificial_sub11 := (once_[0, 62*dt]((((gear[t] == 4)  and not( (gear[t-1*dt] == 4))) and not(((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4))))) or (not(((gear[t] == 4)  and not( (gear[t-1*dt] == 4)))) and ((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4))))))
# Depth: 		4
# Modal depth: 	1
# Start delay: 	63
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# ARCH_AT54_req_artificial_sub12 := not((once_[0, 62*dt]((((gear[t] == 4)  and not( (gear[t-1*dt] == 4))) and not(((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4))))) or (not(((gear[t] == 4)  and not( (gear[t-1*dt] == 4)))) and ((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4)))))))
# Depth: 		5
# Modal depth: 	1
# Start delay: 	63
# End delay: 	0
# Type: 		phi_exp

############
# Constant #
############
# ARCH_AT54_req_artificial_sub13 := 4
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

######################
# RelationalOperator #
######################
# ARCH_AT54_req_artificial_sub14 := (gear[t] == 4)
# Depth: 		1
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# ARCH_AT54_req_artificial_sub15 := (not((once_[0, 62*dt]((((gear[t] == 4)  and not( (gear[t-1*dt] == 4))) and not(((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4))))) or (not(((gear[t] == 4)  and not( (gear[t-1*dt] == 4)))) and ((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4)))))))  or  (gear[t] == 4))
# Depth: 		6
# Modal depth: 	0
# Start delay: 	63
# End delay: 	0
# Type: 		phi_exp

#########
# Logic #
#########
# ARCH_AT54_req_artificial_sub16 := ((artificial_ARCH_AT5[t] <= artificial_ARCH_AT5_constant)  or  (not((once_[0, 62*dt]((((gear[t] == 4)  and not( (gear[t-1*dt] == 4))) and not(((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4))))) or (not(((gear[t] == 4)  and not( (gear[t-1*dt] == 4)))) and ((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4)))))))  or  (gear[t] == 4)))
# Depth: 		7
# Modal depth: 	0
# Start delay: 	63
# End delay: 	0
# Type: 		phi_exp

# =========== SUBREQUIREMENTS ============
# No prerequisites!
# phi_sub1 := ((artificial_ARCH_AT5[t] <= artificial_ARCH_AT5_constant)  or  (not((once_[0, 62*dt]((((gear[t] == 4)  and not( (gear[t-1*dt] == 4))) and not(((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4))))) or (not(((gear[t] == 4)  and not( (gear[t-1*dt] == 4)))) and ((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4)))))))  or  (gear[t] == 4)))

# =========== FINAL REQUIREMENT ===========
# phi_implies is the formula when interpreting switches using "=>"
# phi_implies := ((artificial_ARCH_AT5[t] <= artificial_ARCH_AT5_constant)  or  (not((once_[0, 62*dt]((((gear[t] == 4)  and not( (gear[t-1*dt] == 4))) and not(((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4))))) or (not(((gear[t] == 4)  and not( (gear[t-1*dt] == 4)))) and ((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4)))))))  or  (gear[t] == 4)))

phi_ARCH_AT54_req_artificial := alw_[t_init_ARCH_AT54_artificial + 63*dt,t_final_ARCH_AT54_artificial](((artificial_ARCH_AT5[t] <= artificial_ARCH_AT5_constant)  or  (not((once_[0, 62*dt]((((gear[t] == 4)  and not( (gear[t-1*dt] == 4))) and not(((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4))))) or (not(((gear[t] == 4)  and not( (gear[t-1*dt] == 4)))) and ((gear[t-1*dt] == 4)  and not( (gear[t-2*dt] == 4)))))))  or  (gear[t] == 4))))

