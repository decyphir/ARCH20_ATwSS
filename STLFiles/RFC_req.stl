# Automatically generated STL formula
# Model: RFC
# Requirement: RFC_req
# Author: Johan Lidï¿½n Eddeland

# The following systems have been skipped and logged:
# UnitDelay1_14
# UnitDelay1_15

# Parameters
param t_init_RFC = 0, t_final_RFC = 10, dt = 0.04, RFC_preconditions_speedLimit = 50, RFC_preconditions_rpmLimit = 2500, RFC_preconditions_torqueLimit = 5, RFC_preconditions_gear = 1, RFC_preconditions_throttleLimit = 80, fixedStepSize = 0.04, RFC_subsystem1_notAlwaysTime = 0.08, RFC_subsystem1_downThreshold1 = 500, RFC_subsystem1_downThreshold2 = 20, RFC_subsystem1_gearState = 2, RFC_subsystem1_evChangesTime = 1, RFC_subsystem1_rpmLimit = 3000, RFC_subsystem1_torqueLimit = 1000, RFC_subsystem1_gear = 1, RFC_subsystem1_evChangesTime2 = 1

##########
# Inport #
##########
# RFC_req_sub1 := gearSelectionState[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# RFC_req_sub2 := downThreshold[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# RFC_req_sub3 := speed[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# RFC_req_sub4 := RPM[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# RFC_req_sub5 := outputTorque[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# RFC_req_sub6 := gear[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

##########
# Inport #
##########
# RFC_req_sub7 := throttle[t]
# Depth: 		0
# Modal depth: 	0
# Start delay: 	0
# End delay: 	0
# Type: 		signal_exp

# Start of SubSystem (preconditions) #
	############
	# Constant #
	############
	# RFC_req_sub8 := RFC_preconditions_speedLimit
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_req_sub9 := (speed[t] < RFC_preconditions_speedLimit)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_req_sub10 := RFC_preconditions_rpmLimit
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_req_sub11 := (RPM[t] < RFC_preconditions_rpmLimit)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_req_sub12 := RFC_preconditions_torqueLimit
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_req_sub13 := (outputTorque[t] >= RFC_preconditions_torqueLimit)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_req_sub14 := RFC_preconditions_gear
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_req_sub15 := (gear[t] == RFC_preconditions_gear)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_req_sub16 := RFC_preconditions_throttleLimit
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_req_sub17 := (throttle[t] >= RFC_preconditions_throttleLimit)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_req_sub18 := 0
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	#############
	# SubSystem #
	#############
	# RFC_req_sub19 := (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))
	# Depth: 		3
	# Modal depth: 	1
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# RFC_req_sub20 := (((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))
	# Depth: 		4
	# Modal depth: 	1
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

# End of SubSystem (preconditions) #

# Start of SubSystem (subsystem1) #
	############
	# Constant #
	############
	# RFC_req_sub21 := fixedStepSize
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	############
	# Constant #
	############
	# RFC_req_sub22 := RFC_subsystem1_notAlwaysTime
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	############
	# Constant #
	############
	# RFC_req_sub23 := RFC_subsystem1_downThreshold1
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_req_sub24 := (downThreshold[t] <= RFC_subsystem1_downThreshold1)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_req_sub25 := RFC_subsystem1_downThreshold2
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_req_sub26 := (downThreshold[t] <= RFC_subsystem1_downThreshold2)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#############
	# SubSystem #
	#############
	# RFC_req_sub27 := (not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))
	# Depth: 		3
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# RFC_req_sub28 := not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t])))
	# Depth: 		4
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# RFC_req_sub29 := ((downThreshold[t] <= RFC_subsystem1_downThreshold1)  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))
	# Depth: 		5
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_req_sub30 := RFC_subsystem1_gearState
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_req_sub31 := (gearSelectionState[t] == RFC_subsystem1_gearState)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# RFC_req_sub32 := (((downThreshold[t] <= RFC_subsystem1_downThreshold1)  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))  and  (gearSelectionState[t] == RFC_subsystem1_gearState))
	# Depth: 		6
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_req_sub33 := RFC_subsystem1_evChangesTime
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	############
	# Constant #
	############
	# RFC_req_sub34 := fixedStepSize
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

# Start of SubSystem (Detect Increase) #
		#############
		# UnitDelay #
		#############
		# RFC_req_sub35 := (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))
		# Depth: 		4
		# Modal depth: 	1
		# Start delay: 	1
		# End delay: 	0
		# Type: 		phi_exp

		######################
		# RelationalOperator #
		######################
		# RFC_req_sub36 := ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))
		# Depth: 		5
		# Modal depth: 	1
		# Start delay: 	1
		# End delay: 	0
		# Type: 		phi_exp

# End of SubSystem (Detect Increase) #

	#############
	# SubSystem #
	#############
	# RFC_req_sub37 := (once_[0, 25*dt]((((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))) and not(((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))) or (not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and ((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))))
	# Depth: 		7
	# Modal depth: 	2
	# Start delay: 	26
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# RFC_req_sub38 := ((((downThreshold[t] <= RFC_subsystem1_downThreshold1)  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))  and  (gearSelectionState[t] == RFC_subsystem1_gearState))  or  (once_[0, 25*dt]((((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))) and not(((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))) or (not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and ((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))))
	# Depth: 		8
	# Modal depth: 	2
	# Start delay: 	26
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_req_sub39 := RFC_subsystem1_rpmLimit
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_req_sub40 := (RPM[t] >= RFC_subsystem1_rpmLimit)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_req_sub41 := RFC_subsystem1_torqueLimit
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_req_sub42 := (outputTorque[t] > RFC_subsystem1_torqueLimit)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_req_sub43 := RFC_subsystem1_gear
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	######################
	# RelationalOperator #
	######################
	# RFC_req_sub44 := not(gear[t] == RFC_subsystem1_gear)
	# Depth: 		1
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# RFC_req_sub45 := ((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))
	# Depth: 		5
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#############
	# SubSystem #
	#############
	# RFC_req_sub46 := (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t]))
	# Depth: 		7
	# Modal depth: 	1
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# RFC_req_sub47 := ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  or  (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t])))
	# Depth: 		8
	# Modal depth: 	1
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	############
	# Constant #
	############
	# RFC_req_sub48 := RFC_subsystem1_evChangesTime2
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	############
	# Constant #
	############
	# RFC_req_sub49 := fixedStepSize
	# Depth: 		0
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		signal_exp

	#########
	# Logic #
	#########
	# RFC_req_sub50 := not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))
	# Depth: 		5
	# Modal depth: 	1
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

# Start of SubSystem (Detect Increase) #
		#############
		# UnitDelay #
		#############
		# RFC_req_sub51 := not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))
		# Depth: 		5
		# Modal depth: 	1
		# Start delay: 	1
		# End delay: 	0
		# Type: 		phi_exp

		######################
		# RelationalOperator #
		######################
		# RFC_req_sub52 := (not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))))
		# Depth: 		6
		# Modal depth: 	1
		# Start delay: 	1
		# End delay: 	0
		# Type: 		phi_exp

# End of SubSystem (Detect Increase) #

	#############
	# SubSystem #
	#############
	# RFC_req_sub53 := (once_[0, 25*dt](((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and not((not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))) or (not((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))))) and (not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))))
	# Depth: 		8
	# Modal depth: 	2
	# Start delay: 	26
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# RFC_req_sub54 := not((gearSelectionState[t] == RFC_subsystem1_gearState))
	# Depth: 		2
	# Modal depth: 	0
	# Start delay: 	0
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# RFC_req_sub55 := ((once_[0, 25*dt](((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and not((not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))) or (not((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))))) and (not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))))  or  not((gearSelectionState[t] == RFC_subsystem1_gearState)))
	# Depth: 		9
	# Modal depth: 	0
	# Start delay: 	26
	# End delay: 	0
	# Type: 		phi_exp

	##########
	# Switch #
	##########
	# RFC_req_sub56 := (((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  or  (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t]))) and ((((downThreshold[t] <= RFC_subsystem1_downThreshold1)  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))  and  (gearSelectionState[t] == RFC_subsystem1_gearState))  or  (once_[0, 25*dt]((((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))) and not(((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))) or (not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and ((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))))) or(not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  or  (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t])))) and ((once_[0, 25*dt](((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and not((not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))) or (not((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))))) and (not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))))  or  not((gearSelectionState[t] == RFC_subsystem1_gearState))))
	# Depth: 		11
	# Modal depth: 	2
	# Start delay: 	26
	# End delay: 	0
	# Type: 		phi_exp

	#########
	# Logic #
	#########
	# RFC_req_sub57 := (((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  or  (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t]))) and not(((((downThreshold[t] <= RFC_subsystem1_downThreshold1)  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))  and  (gearSelectionState[t] == RFC_subsystem1_gearState))  or  (once_[0, 25*dt]((((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))) and not(((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))) or (not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and ((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))))))) or(not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  or  (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t])))) and not(((once_[0, 25*dt](((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and not((not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))) or (not((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))))) and (not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))))  or  not((gearSelectionState[t] == RFC_subsystem1_gearState)))))
	# Depth: 		12
	# Modal depth: 	2
	# Start delay: 	26
	# End delay: 	0
	# Type: 		phi_exp

	#############
	# SubSystem #
	#############
	# RFC_req_sub58 := (not(hist_[0, 2*dt]((((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  or  (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t]))) and not(((((downThreshold[t] <= RFC_subsystem1_downThreshold1)  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))  and  (gearSelectionState[t] == RFC_subsystem1_gearState))  or  (once_[0, 25*dt]((((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))) and not(((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))) or (not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and ((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))))))) or(not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  or  (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t])))) and not(((once_[0, 25*dt](((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and not((not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))) or (not((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))))) and (not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))))  or  not((gearSelectionState[t] == RFC_subsystem1_gearState))))))))
	# Depth: 		14
	# Modal depth: 	3
	# Start delay: 	28
	# End delay: 	0
	# Type: 		phi_exp

# End of SubSystem (subsystem1) #

# =========== SUBREQUIREMENTS ============
# No prerequisites!
# phi_sub1 := (not(hist_[0, 2*dt]((((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  or  (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t]))) and not(((((downThreshold[t] <= RFC_subsystem1_downThreshold1)  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))  and  (gearSelectionState[t] == RFC_subsystem1_gearState))  or  (once_[0, 25*dt]((((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))) and not(((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))) or (not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and ((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))))))) or(not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  or  (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t])))) and not(((once_[0, 25*dt](((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and not((not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))) or (not((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))))) and (not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))))  or  not((gearSelectionState[t] == RFC_subsystem1_gearState))))))))

# =========== FINAL REQUIREMENT ===========
# phi_implies is the formula when interpreting switches using "=>"
# phi_implies := (not(hist_[0, 2*dt]((((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  or  (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t]))) and not(((((downThreshold[t] <= RFC_subsystem1_downThreshold1)  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))  and  (gearSelectionState[t] == RFC_subsystem1_gearState))  or  (once_[0, 25*dt]((((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))) and not(((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))) or (not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and ((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))))))) or(not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  or  (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t])))) and not(((once_[0, 25*dt](((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and not((not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))) or (not((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))))) and (not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))))  or  not((gearSelectionState[t] == RFC_subsystem1_gearState))))))))

phi_RFC_req := alw_[t_init_RFC + 28*dt,t_final_RFC]((not(hist_[0, 2*dt]((((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  or  (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t]))) and not(((((downThreshold[t] <= RFC_subsystem1_downThreshold1)  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))  and  (gearSelectionState[t] == RFC_subsystem1_gearState))  or  (once_[0, 25*dt]((((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))) and not(((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))) or (not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and ((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))  and not( (((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit)))))))))))) or(not(((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit))))  or  (not(((((RPM[t] >= RFC_subsystem1_rpmLimit)  or  (outputTorque[t] > RFC_subsystem1_torqueLimit))  or  not(gear[t] == RFC_subsystem1_gear))  or  not((not((downThreshold[t] <= RFC_subsystem1_downThreshold2)) and ((downThreshold[t] <= RFC_subsystem1_downThreshold1) or UnitDelay1_14[t]))))) and ((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))) or UnitDelay1_15[t])))) and not(((once_[0, 25*dt](((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit))))))) and not((not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))) or (not((not((((((speed[t] < RFC_preconditions_speedLimit)  and  (RPM[t] < RFC_preconditions_rpmLimit))  and  (outputTorque[t] >= RFC_preconditions_torqueLimit))  and  (gear[t] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))))) and (not((((((speed[t-1*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-1*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-1*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-1*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-1*dt] >= RFC_preconditions_throttleLimit)))))  and not( not((((((speed[t-2*dt] < RFC_preconditions_speedLimit)  and  (RPM[t-2*dt] < RFC_preconditions_rpmLimit))  and  (outputTorque[t-2*dt] >= RFC_preconditions_torqueLimit))  and  (gear[t-2*dt] == RFC_preconditions_gear))  and  (not(0) and once_[0, 10]((throttle[t-2*dt] >= RFC_preconditions_throttleLimit))))))))))  or  not((gearSelectionState[t] == RFC_subsystem1_gearState)))))))))

